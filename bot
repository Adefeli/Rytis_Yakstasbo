import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from database import Session, User

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")
CHANNEL_ID = os.getenv("CHANNEL_ID")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# Set up logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_msg = (
        "üåü *Welcome to Yakstas Capital Airdrop!* üåü\n\n"
        "To qualify for the airdrop:\n"
        "1. Join our Telegram Group: [Yakstas Capital](https://t.me/yakstascapital)\n"
        "2. Join our Telegram Channel: [Yakstas Channel](https://t.me/Yakstaschannel)\n"
        "3. Follow our TikTok: [@yakstascapital8](https://www.tiktok.com/@yakstascapital8?lang=en-GB)\n\n"
        "After completing these steps:\n"
        "- Use /check to verify your memberships\n"
        "- Submit TikTok proof with /submit_tiktok"
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=welcome_msg,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

async def check_eligibility(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = Session()
    
    try:
        # Check Telegram memberships
        group_member = await context.bot.get_chat_member(GROUP_ID, user_id)
        channel_member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        
        group_joined = group_member.status in ["member", "administrator", "creator"]
        channel_joined = channel_member.status in ["member", "administrator", "creator"]
        
        # Update database
        user = session.query(User).filter_by(user_id=user_id).first()
        if not user:
            user = User(user_id=user_id)
            session.add(user)
        
        user.group_joined = group_joined
        user.channel_joined = channel_joined
        session.commit()
        
        # Prepare response
        status_msg = (
            f"‚úÖ Group Joined: {group_joined}\n"
            f"‚úÖ Channel Joined: {channel_joined}\n"
            f"‚úÖ TikTok Verified: {user.tiktok_verified}\n\n"
        )
        
        if all([group_joined, channel_joined, user.tiktok_verified]):
            await update.message.reply_text(f"üéâ Congratulations! You're eligible!\n{status_msg}")
        else:
            missing = []
            if not group_joined: missing.append("Telegram Group")
            if not channel_joined: missing.append("Telegram Channel")
            if not user.tiktok_verified: missing.append("TikTok Follow")
            
            await update.message.reply_text(
                f"‚ö†Ô∏è Complete these tasks:\n{status_msg}"
                f"Missing: {', '.join(missing)}\n\n"
                "Submit TikTok proof with /submit_tiktok"
            )
            
    except Exception as e:
        logging.error(f"Check error: {e}")
        await update.message.reply_text("‚ùå Verification failed. Try again later.")
    finally:
        session.close()

async def submit_tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì∏ Please send a screenshot proving you follow our TikTok page.\n\n"
        "Note: Your TikTok username must be visible!"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo_id = update.message.photo[-1].file_id  # Highest resolution photo
    session = Session()
    
    try:
        user = session.query(User).filter_by(user_id=user_id).first() or User(user_id=user_id)
        user.proof_photo_id = photo_id
        session.merge(user)
        session.commit()
        
        # Notify admin
        keyboard = [
            [InlineKeyboardButton("‚úÖ Approve", callback_data=f"approve_{user_id}"),
             InlineKeyboardButton("‚ùå Reject", callback_data=f"reject_{user_id}")]
        ]
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=photo_id,
            caption=f"‚ö†Ô∏è TikTok Verification Request\nUser ID: {user_id}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("‚úÖ Proof submitted! Admins will review it shortly.")
        
    except Exception as e:
        logging.error(f"Photo error: {e}")
        await update.message.reply_text("‚ùå Failed to process your submission.")
    finally:
        session.close()

async def handle_verification_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action, user_id = query.data.split("_")
    user_id = int(user_id)
    session = Session()
    
    try:
        user = session.query(User).get(user_id)
        if action == "approve":
            user.tiktok_verified = True
            msg_user = "üéâ TikTok verification approved! You're now eligible for the airdrop!"
            msg_admin = "‚úÖ Verification approved"
        else:
            user.tiktok_verified = False
            msg_user = "‚ùå Your TikTok proof was rejected. Submit again with /submit_tiktok"
            msg_admin = "‚ùå Verification rejected"
        
        session.commit()
        
        # Notify user
        await context.bot.send_message(chat_id=user_id, text=msg_user)
        # Update admin
        await query.edit_message_caption(caption=f"{msg_admin}\nUser ID: {user_id}")
        
    except Exception as e:
        logging.error(f"Callback error: {e}")
    finally:
        session.close()
        await query.answer()

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("check", check_eligibility))
    application.add_handler(CommandHandler("submit_tiktok", submit_tiktok))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(handle_verification_decision, pattern=r"^(approve|reject)_\d+$"))
    
    application.run_polling()

if __name__ == "__main__":
    main()
